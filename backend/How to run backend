git clone https://github.com/graphhopper/graphhopper.git
cd graphhopper

Invoke-WebRequest -Uri "https://repo1.maven.org/maven2/com/graphhopper/graphhopper-web/10.0/graphhopper-web-10.0.jar" -OutFile "graphhopper-web-10.0.jar"

Invoke-WebRequest -Uri "https://raw.githubusercontent.com/graphhopper/graphhopper/10.x/config-example.yml" -OutFile "config-example.yml"

Invoke-WebRequest -Uri "http://download.geofabrik.de/asia/nepal-latest.osm.pbf" -OutFile "nepal-latest.osm.pbf"


 After this, you should have:

arduino
Copy
Edit
C:\graphhopper10\
‚îú‚îÄ‚îÄ graphhopper-web-10.0.jar
‚îú‚îÄ‚îÄ config-example.yml
‚îú‚îÄ‚îÄ nepal-latest.osm.pbf


 Run GraphHopper with Nepal Map
Still in PowerShell:

powershell

java -D"dw.graphhopper.datareader.file=nepal-latest.osm.pbf" -jar graphhopper-web-10.0.jar server config-example.yml
Once you see:

arduino

Server - Started @8989
Open:

arduino

http://localhost:8989/
‚ö† If PowerShell blocks scripts/downloads
Run this once (admin PowerShell):

powershell

Set-ExecutionPolicy RemoteSigned





Below is unnecessary alternates we can use. They are not used because :

GraphHopper advantages:

-Uses much less RAM

-Starts faster after first build

-Easier to integrate via simple REST API (/route?point=A&point=B)

-No database dependency ‚Üí portable, zero setup

-Runs with just .jar + .osm.pbf


üöç B. OpenTripPlanner (if using transit, schedules, etc.)
You need:

nepal-latest.osm.pbf

GTFS feeds (optional, if public transport is modeled)

Build command:


java -Xmx4G -jar otp.jar --build ./graphs/nepal/
Generates OTP graph you can query via API.

 3. Load into PostgreSQL + PostGIS
 Use osm2pgsql (fastest for PostGIS import)

osm2pgsql -d your_db -U your_user -H localhost \
  --create --slim \
  --hstore \
  --style default.style \
  nepal-latest.osm.pbf

Creates PostGIS tables like:

planet_osm_point, planet_osm_line, planet_osm_polygon

You can then:

Query buildings, roads, rivers, etc.

Overlay damage zones

Perform routing-related spatial analysis (blocked roads, shortest safe path, etc.)

 4. (Optional) Preprocess with Osmosis or osmium-tool
Use this if you want to:

Extract only roads or certain tags (e.g., highway=primary)

Clip to bounding box (e.g., Kathmandu Valley)

osmosis --read-pbf nepal-latest.osm.pbf \
  --bounding-box top=28.3 left=83.9 bottom=27.6 right=85.6 \
  --write-pbf kathmandu.osm.pbf
üîÅ Integration Summary
Purpose	Tool
Download Nepal OSM	Geofabrik or BBBike
Routing Preprocessing	GraphHopper / OTP
Spatial DB Import (PostGIS)	osm2pgsql
Clipping / Tag Filtering	Osmosis / osmium
Serve Routes to Spring Boot	GraphHopper API / OTP API
Frontend Map Layer (React)	Leaflet / MapLibre

